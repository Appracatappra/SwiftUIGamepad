//
//  GamepadView.swift
//  ReedWriteCycle (iOS)
//
//  Created by Kevin Mullins on 11/9/22.
//
//  https://medium.com/@max.codes/use-swiftui-in-uikit-view-controllers-with-uihostingcontroller-8fe68dfc523b

import Foundation
import SwiftUI
import GameController

/// A special SwiftUI container `View` that can be configured to ignore the standard user interaction events that are sent to the responder chain and use only the events coming from a connected gamepad.
/// - Remark: For example, if the `useGamepadInputOnly` property of the `GamepadInteractionController` is `true`, then swipes on the Siri Remote's touchpad for an app running on an Apple TV will not move focus between buttons on the screen.
public struct GamepadInteractionController<Content: View>: UIViewControllerRepresentable {
    // MARK: - Type Aliases
    /// Defines the type of `ViewController` being wrapped in the `UIViewControllerRepresentable`.
    public typealias UIViewControllerType = GCEventViewController
    
    // MARK: - Properties
    /// If `true` then standard user interaction events will be ignored and the gamepad has full user interaction controll, if `false` then standard user interaction events are generated by the system and sent to the responder chain.
    /// - Remark: For example, if the `useGamepadInputOnly` property of the `GamepadInteractionController` is `true`, the swipes on the Siri Remote's touchpad for an app running on an Apple TV will not move focus between buttons on the screen. If  the `useGamepadInputOnly` property is `false`, the normal responder chain will be used and the swipes on the remote would move the control focus.
    @Binding public var useGamepadInputOnly: Bool
    
    /// The SwiftUI content that is being wrapped by the `GamepadView`.
    @ViewBuilder public var content: Content
    
    // MARK: - Functions
    /// Handles SwiftUI requesting a `GCEventViewController`.
    /// - Parameter context: The context for the new view controller.
    /// - Returns: Returns a new `GCEventViewController`.
    public func makeUIViewController(context: Context) -> GCEventViewController {
        let controller: GCEventViewController = UIViewControllerType()
        controller.controllerUserInteractionEnabled = !useGamepadInputOnly
        
        let contentView = UIHostingController (rootView: content)
        
        controller.addChild (contentView)
        controller.view.addSubview (contentView.view)
        
        contentView.view.translatesAutoresizingMaskIntoConstraints=false
        contentView.view.topAnchor.constraint (equalTo: controller.view.topAnchor) .isActive = true
        contentView.view.bottomAnchor.constraint (equalTo: controller.view.bottomAnchor) .isActive = true
        contentView.view.leftAnchor.constraint (equalTo: controller.view.leftAnchor).isActive = true
        contentView.view.rightAnchor.constraint (equalTo: controller.view.rightAnchor).isActive = true
        
        return controller
    }
    
    /// Handles updates to the `GCEventViewController` for SwiftUI.
    /// - Parameters:
    ///   - uiViewController: The `GCEventViewController` to handle updates for.
    ///   - context: The context for the update.
    public func updateUIViewController(_ uiViewController: GCEventViewController, context: Context) {
        uiViewController.controllerUserInteractionEnabled = !useGamepadInputOnly
    }
}
